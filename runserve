#!/bin/bash

fnHelp () {
    echo "runserve help            - show help!!!"
    echo "         init            - initialize runserver config"
    echo "         version         - version of this file"
    echo "         update          - updating this file"
    echo "         stop            - stopping container"
    echo "         nodaemon        - run container with no daemon"
    exit 1
}

fnCreateConfigFile () {
    echo "hello config file"
    exit 1
}

fnVersion () {
    echo "v2.2"
    exit 1
}

fnBash () {
    fnGetConfig
    docker run --rm --name=$containerName -it -v $(pwd):/app -e GITUSER="$gitUser" -e GITEMAIL="$gitEmail" -e PORT=$port -p $port:$port -p 8080:8080 $dockerImage runserveStart $2 $3 $4 $5 $6 $7 $8 $9
    read -p "Commit changes before terminate runserver? [Y/n]: " changes
    exit 1 
}

fnGetConfig () {
    source ~/.config/runserve/runserve.config
}






#################################################################
### OS DETECT:
# if [[ "$OSTYPE" == "linux-gnu" ]]; then
#         RAND=$(shuf -i 100-199 -n 1)
# elif [[ "$OSTYPE" == "darwin"* ]]; then
#         RAND=$(jot -r 1 100 199)
# fi
#################################################################
### READ CONFIG VARS:


# GLOBAL_CONFIG=~/.config/runserve/runserve.config
# LOCAL_CONFIG=./.runserve/config
# source $GLOBAL_CONFIG
# if [ -f $LOCAL_CONFIG ]; then
#     source $LOCAL_CONFIG
# fi
#################################################################
# ### CHECK CONFIG VARS:
# if [ ${#port} -lt '2' ]; then
#     read -p 'Angular local port (4200-4219)[4200]: ' port
#     if [ ${#port} -lt 3 ]; then
#         echo "port='4200'" >> $GLOBAL_CONFIG
#     else
#         echo "port='$port'" >> $GLOBAL_CONFIG
#     fi
# fi
# if [ ${#gitUser} -lt '3' ]; then
#     read -p 'Github login: ' gitUser
#     if [ ${#gitUser} -gt 3 ]; then
#         echo "gitUser='$gitUser'" >> $GLOBAL_CONFIG
#     fi
# fi
# if [ ${#gitEmail} -lt '3' ]; then
#     read -p 'Github email: ' gitEmail
#     if [ ${#gitEmail} -gt 3 ]; then
#         echo "gitEmail='$gitEmail'" >> $GLOBAL_CONFIG
#     fi
# fi
# if [ ${#dockerImage} -lt '3' ]; then
#     echo "Choose Angular version:"
#         echo "1) 7.3.1"
#         echo "2) 7.3.2"
#         read -p "Choose: " dockerImage
#         if [[ $dockerImage = 1 || $docker_image = 7.3.1 ]]; then
#             dockerImage="ngxdnd/angular-dev-env:7.3.1_v2"
#             echo $dockerImage
#         elif [[ $dockerImage = 2 || $dockerImage = 7.3.2 ]]; then
#             dockerImage="ngxdnd/angular-dev-env:7.3.2_v2"
#             echo $dockerImage
#         fi
#         echo "dockerImage='$dockerImage'" >> $GLOBAL_CONFIG
# fi
# if [ ${#containerName} -lt '2' ]; then
#     read -p 'Default container name [angular-dev-env]: ' containerName
#     if [ ${#containerName} -lt 3 ]; then
#         echo "containerName='angular-dev-env'" >> $GLOBAL_CONFIG
#     else
#         echo "containerName='$containerName'" >> $GLOBAL_CONFIG
#     fi
# fi
#################################################################
## CTRL-V CTRL-Z KEYPRESS:
stty quit "^Z"
trap " docker stop $containerName" 3;
trap ctrl_c INT
function ctrl_c(){
    read -p "Commit changes before terminate runserver?" changes
    echo " docker stopping, wait few seconds..."
    docker stop $containerName
    echo 'docker stopped'
}
#################################################################


if [[ $1 = version ]]; then fnVersion
elif [[ $1 = init ]]; then fnCreateConfigFile
elif [[ $1 = -h || $1 = --help || $1 = help ]]; then fnHelp
elif [[ $1 = bash ]]; then fnBash
elif [[ $1 = stop ]]; then
    echo " docker stopping, wait few seconds..."
    docker stop ngx-dev-env
    echo 'stopped'
    exit 1
elif [[ $1 = update ]]; then
    if [[ $2 = dev ]]; then
        if [[ $3 = getfrombin ]]; then
            cp ~/bin/runserve ./runserve
        elif [[ $3 = puttobin ]]; then
            cp ./runserve ~/bin/runserve
        else
            echo 'getfrombin || puttobin'
        fi
    else
    echo 'comming soon...'
    fi
    exit 1
elif [[ $1 = nodaemon ]]; then
    docker run --rm --name=$containerName -it -v $(pwd):/app -e GITUSER="$gitUser" -e GITEMAIL="$gitEmail" -e PORT=$port -p $port:$port $dockerImage start_script $2 $3 $4 $5 $6 $7 $8 $9 
    docker logs $containerName -f
    exit 1
elif [[ $2 = serve ]]; then
    docker run  --rm  -d --name=$containerName -it -v $(pwd):/app -e GITUSER="$gitUser" -e GITEMAIL="$gitEmail"  -e PORT=$port -p $port:$port $dockerImage start_script $1 $2 $3 $4 $5 $6 $7 $8 $9 --host=0.0.0.0 --port=$port
    docker logs $containerName -f
    exit 1
else fnHelp
    
fi

