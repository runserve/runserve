#!/bin/bash
version='0.0.4'

PURPLE='\033[0;35m'
NC='\033[0m' # No Color


fnHelp () {
    echo ' '
    echo "runserve help            - show help!!!"
    echo "         init            - initialize runserver config"
    echo "         version         - version of this file"
    echo "         update          - updating this file"
    echo ' '
    exit 1
}

fnVersion () {
  latest=$(curl -s https://raw.githubusercontent.com/runserve/runserve/master/runserve.latest)
    echo "v"$version
}

fnVersionCheck () {
  latest=$(curl -s https://raw.githubusercontent.com/runserve/runserve/master/runserve.latest)
  if [[ "$version" != "$latest" ]]; then
    echo ' '
    echo -e "${PURPLE}          NEW VERSION IS AVAILABLE "
    echo '          ************************'
    echo '          *   runserve v.'$latest'   *'
    echo '          ************************'
    echo ' '
    echo -e "run: ${NC}runserve upgrade${PURPLE} - to update to newest version"
    echo -e "${NC}"
  elif [[ $1 = update ]]; then
    echo " "
    echo -e "Latest runserve version: $latest - everything is updated!"
    echo " "
  fi
}

fnBash () {
    fnGetConfig
    docker run --rm --name=$containerName-$port -it -v $(pwd):/app -e GITUSER="$gitUser" -e GITEMAIL="$gitEmail" -e PORT=$port -p $port:$port -p 8080:8080 $dockerImage containerStart $2 $3 $4 $5 $6 $7 $8 $9
    #read -p "Commit changes before terminate runserver? [Y/n]: " changes
    exit 1
}

fnGetConfig () {
    source .runserve/config
    if [ ${#containerName} -lt '2' ]; then
      fnInitConfig
    else
      source .runserve/config
    fi
}

fnInitConfig () {
    ### CHECK CONFIG VARS:
    mkdir .runserve
    touch ./.runserve/config
        read -p 'Choose Angular local port (4200-4219)[4200]: ' port
        if [ ${#port} -lt 3 ]; then
            echo "port='4200'" > ./.runserve/config
            port=4200
        else
            echo "port='$port'" >> ./.runserve/config
        fi
        read -p 'Github login: ' gitUser
        if [ ${#gitUser} -gt 3 ]; then
            echo "gitUser='$gitUser'" >> ./.runserve/config
        fi
        read -p 'Github email: ' gitEmail
        if [ ${#gitEmail} -gt 3 ]; then
            echo "gitEmail='$gitEmail'" >> ./.runserve/config
        fi
        echo "Choose RUNSERVE version:"
            echo "1) Angular 7.3.1"
            echo "2) Angular 7.3.2"
            echo "3) Angular 7.3.3"
            read -p "Choose: " dockerImage
            if [[ $dockerImage = 1 || $docker_image = 7.3.1 ]]; then
                dockerImage="runserve/angular_7.3.1:0.1"
                echo $dockerImage
            elif [[ $dockerImage = 2 || $docker_image = 7.3.2 ]]; then
                dockerImage="runserve/angular_7.3.2:0.1"
                echo $dockerImage
            elif [[ $dockerImage = 3 || $dockerImage = 7.3.3 ]]; then
                dockerImage="runserve/angular_7.3.3:0.1"
                echo $dockerImage
            fi
            echo "dockerImage='$dockerImage'" >> ./.runserve/config
        read -p "Default container name [angular-dev-env-"$port"]: " containerName
        if [ ${#containerName} -lt 3 ]; then
            echo "containerName='angular-dev-env'" >> ./.runserve/config
        else
            echo "containerName='$containerName'" >> ./.runserve/config
        fi
    if [[ $1 = bash ]]; then fnBash
    else
      exit 1;
    fi
}







#################################################################
### OS DETECT:
# if [[ "$OSTYPE" == "linux-gnu" ]]; then
#         RAND=$(shuf -i 100-199 -n 1)
# elif [[ "$OSTYPE" == "darwin"* ]]; then
#         RAND=$(jot -r 1 100 199)
# fi
#################################################################
### READ CONFIG VARS:


################################################################

#################################################################
## CTRL-V CTRL-Z KEYPRESS:
stty quit "^Z"
trap " docker stop $containerName" 3;
trap ctrl_c INT
function ctrl_c(){
    read -p "Commit changes before terminate runserver?" changes
    echo " docker stopping, wait few seconds..."
    docker stop $containerName
    echo 'docker stopped'
}
#################################################################


if [[ $1 = version ]]; then fnVersion
elif [[ $1 = init ]]; then fnInitConfig
elif [[ $1 = -h || $1 = --help || $1 = help ]]; then fnHelp
elif [[ $1 = bash ]]; then fnBash
elif [[ $1 = update ]]; then
    if [[ $2 = dev ]]; then
        if [[ $3 = getfrombin ]]; then
            cp ~/bin/runserve ./runserve
        elif [[ $3 = puttobin ]]; then
            cp ./runserve ~/bin/runserve
        else
            echo 'getfrombin || puttobin'
        fi
    else
        fnVersionCheck "$1"
    fi
    exit 1
elif [[ $1 = upgrade ]]; then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "no update available try leater"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew upgrade runserve
    fi
else fnHelp

fi
