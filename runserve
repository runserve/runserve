#!/bin/bash
version='0.0.6'

PURPLE='\033[0;35m'
NC='\033[0m' # No Color


fnHelp () {
    echo ' '
    echo "runserve help            - show help!!!"
    echo "         init            - initialize runserver config"
    echo "         version         - version of this file"
    echo "         update          - updating this file"
    echo ' '
    exit 1
}

fnVersion () {
  latest=$(curl -s https://raw.githubusercontent.com/runserve/runserve/master/runserve.latest)
    echo "v"$version
}

fnVersionCheck () {
  latest=$(curl -s https://raw.githubusercontent.com/runserve/runserve/master/runserve.latest)
  if [[ "$version" != "$latest" ]]; then
    echo ' '
    echo -e "${PURPLE}          NEW VERSION IS AVAILABLE "
    echo '          ************************'
    echo '          *   runserve v.'$latest'   *'
    echo '          ************************'
    echo ' '
    echo -e "run: ${NC}runserve upgrade${PURPLE} - to update to newest version"
    echo -e "${NC}"
  elif [[ $1 = update ]]; then
    echo " "
    echo -e "Latest runserve version: $latest - everything is updated!"
    echo " "
  fi
}

fnBash () {
    fnGetConfig
    docker run --rm --name=$containerName-$port -it -v $(pwd):/app -e GITUSER="$gitUser" -e GITEMAIL="$gitEmail" -e PORT=4200 -p $port:4200 -p 8080:8080 $dockerImage containerStart $2 $3 $4 $5 $6 $7 $8 $9
    #read -p "Commit changes before terminate runserver? [Y/n]: " changes
    exit 1
}

fnGetConfig () {
    if [ -f ".runserve/config" ]; then
      source .runserve/config
    else
        mkdir .runserve
        touch ./.runserve/config
    fi

}

fnInitChooseEnvironment () {
    echo > ./.runserve/config
    echo "Choose environment:"
        echo "1) Angular"
        echo "2) NodeJS"
        echo "3) Typescript"
        read -p "Choose number [$environment]: " envNewNo
        if [[ $envNewNo = 1 ]]; then fnInitChooseAngularVersion; environment="Angular"
        elif [[ $envNewNo = 2 ]]; then fnInitChooseNodeJSVersion; environment="NodeJS"
        elif [[ $envNewNo = 3 ]]; then fnInitChooseTypescriptVersion; environment="Typescript"
        else envNewNo=$envNo
        fi
        echo "envNo='$envNewNo'" >> ./.runserve/config
        echo "environment='$environment'" >> ./.runserve/config
        echo "dockerImage='$dockerImage'" >> ./.runserve/config
}

fnInitChooseAngularVersion () {
        read -p "Available versions: [7.3.1], [7.3.2], [7.3.3], [latest]: " dockerImage
            if [[ $dockerImage = 7.3.1  || $dockerImage = 7.3.2 || $dockerImage = 7.3.3 ]]; then dockerImage="runserve/angular:$dockerImage"
            else dockerImage="runserve/angular:latest"
            fi
        port=4200
        read -p "Choose Angular local port [$port]: " port
        if [ ${#port} -lt 3 ]; then
            echo "port='4200'" > ./.runserve/config
        else
            echo "port='$port'" >> ./.runserve/config
        fi
}

fnInitChooseNodeVersion () {
        echo "NODEJS SERVER IS NOT AVAILABLE IN THIS VERSION" 
}

fnInitChooseTypescriptVersion () {
        read -p "Available versions: [3.2.4], [latest]: " dockerImage
            if [[ $dockerImage = 3.2.4] ]]; then dockerImage="runserve/typescript:$docker_image"
            else dockerImage="runserve/typescript:latest"
            fi
}

fnInitGitConfig () {
    read -p "Configure GIT? [Y/n]: " gitConfig
    if [[ $gitConfig = n] ]]; then
        echo "GIT skipped"
    else
        read -p "Git login [$gitUser]: " gitUser
        echo "gitUser='$gitUser'" >> ./.runserve/config
        read -p "Git email [$gitEmail]: " gitEmail
        echo "gitEmail='$gitEmail'" >> ./.runserve/config
        read -p "Git address [$gitAddress]: " gitAddress
        echo "gitAddress='$gitAddress'" >> ./.runserve/config
    fi
}

fnInitContainerName () {
        read -p "Default container name [runserve-dev-env]: " containerName
        if [ ${#containerName} -lt 3 ]; then
            echo "containerName='runserve-dev-env'" >> ./.runserve/config
        else
            echo "containerName='$containerName'" >> ./.runserve/config
        fi
}


fnInitConfig () {
    ### CHECK CONFIG VARS:
    fnGetConfig
    fnInitChooseEnvironment
    fnInitGitConfig
    fnInitContainerName




    if [[ $1 = bash ]]; then fnBash
    else
      exit 1;
    fi
}







#################################################################
### OS DETECT:
# if [[ "$OSTYPE" == "linux-gnu" ]]; then
#         RAND=$(shuf -i 100-199 -n 1)
# elif [[ "$OSTYPE" == "darwin"* ]]; then
#         RAND=$(jot -r 1 100 199)
# fi
#################################################################
### READ CONFIG VARS:


################################################################

#################################################################
## CTRL-V CTRL-Z KEYPRESS:
stty quit "^Z"
trap " docker stop $containerName" 3;
trap ctrl_c INT
function ctrl_c(){
    read -p "Commit changes before terminate runserver?" changes
    echo " docker stopping, wait few seconds..."
    docker stop $containerName
    echo 'docker stopped'
}
#################################################################


if [[ $1 = version ]]; then fnVersion
elif [[ $1 = init ]]; then fnInitConfig
elif [[ $1 = -h || $1 = --help || $1 = help ]]; then fnHelp
elif [[ $1 = bash ]]; then fnBash
elif [[ $1 = update ]]; then
    if [[ $2 = dev ]]; then
        if [[ $3 = getfrombin ]]; then
            cp ~/bin/runserve ./runserve
        elif [[ $3 = puttobin ]]; then
            cp ./runserve ~/bin/runserve
        else
            echo 'getfrombin || puttobin'
        fi
    else
        fnVersionCheck "$1"
    fi
    exit 1
elif [[ $1 = upgrade ]]; then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "no update available try leater"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew upgrade runserve
    fi
else fnHelp

fi
